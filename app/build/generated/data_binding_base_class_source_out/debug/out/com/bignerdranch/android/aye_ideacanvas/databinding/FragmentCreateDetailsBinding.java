// Generated by view binder compiler. Do not edit!
package com.bignerdranch.android.aye_ideacanvas.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.Spinner;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.bignerdranch.android.aye_ideacanvas.R;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.button.MaterialButtonToggleGroup;
import com.google.android.material.switchmaterial.SwitchMaterial;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentCreateDetailsBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ImageButton back;

  @NonNull
  public final MaterialButton create;

  @NonNull
  public final MaterialButton everyoneButton;

  @NonNull
  public final TextView genreOne;

  @NonNull
  public final Spinner genreOneSpinner;

  @NonNull
  public final TextView genreTwo;

  @NonNull
  public final Spinner genreTwoSpinner;

  @NonNull
  public final TextView link;

  @NonNull
  public final EditText linkEditText;

  @NonNull
  public final SwitchMaterial matureRated;

  @NonNull
  public final MaterialButton privateButton;

  @NonNull
  public final TextView seriesTitle;

  @NonNull
  public final EditText seriesTitleEditText;

  @NonNull
  public final TextView tags;

  @NonNull
  public final EditText tagsEditText;

  @NonNull
  public final MaterialButton unlistedButton;

  @NonNull
  public final TextView visibility;

  @NonNull
  public final MaterialButtonToggleGroup visibilityToggleGroup;

  private FragmentCreateDetailsBinding(@NonNull ConstraintLayout rootView,
      @NonNull ImageButton back, @NonNull MaterialButton create,
      @NonNull MaterialButton everyoneButton, @NonNull TextView genreOne,
      @NonNull Spinner genreOneSpinner, @NonNull TextView genreTwo,
      @NonNull Spinner genreTwoSpinner, @NonNull TextView link, @NonNull EditText linkEditText,
      @NonNull SwitchMaterial matureRated, @NonNull MaterialButton privateButton,
      @NonNull TextView seriesTitle, @NonNull EditText seriesTitleEditText, @NonNull TextView tags,
      @NonNull EditText tagsEditText, @NonNull MaterialButton unlistedButton,
      @NonNull TextView visibility, @NonNull MaterialButtonToggleGroup visibilityToggleGroup) {
    this.rootView = rootView;
    this.back = back;
    this.create = create;
    this.everyoneButton = everyoneButton;
    this.genreOne = genreOne;
    this.genreOneSpinner = genreOneSpinner;
    this.genreTwo = genreTwo;
    this.genreTwoSpinner = genreTwoSpinner;
    this.link = link;
    this.linkEditText = linkEditText;
    this.matureRated = matureRated;
    this.privateButton = privateButton;
    this.seriesTitle = seriesTitle;
    this.seriesTitleEditText = seriesTitleEditText;
    this.tags = tags;
    this.tagsEditText = tagsEditText;
    this.unlistedButton = unlistedButton;
    this.visibility = visibility;
    this.visibilityToggleGroup = visibilityToggleGroup;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentCreateDetailsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentCreateDetailsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_create_details, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentCreateDetailsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.back;
      ImageButton back = ViewBindings.findChildViewById(rootView, id);
      if (back == null) {
        break missingId;
      }

      id = R.id.create;
      MaterialButton create = ViewBindings.findChildViewById(rootView, id);
      if (create == null) {
        break missingId;
      }

      id = R.id.everyoneButton;
      MaterialButton everyoneButton = ViewBindings.findChildViewById(rootView, id);
      if (everyoneButton == null) {
        break missingId;
      }

      id = R.id.genreOne;
      TextView genreOne = ViewBindings.findChildViewById(rootView, id);
      if (genreOne == null) {
        break missingId;
      }

      id = R.id.genreOneSpinner;
      Spinner genreOneSpinner = ViewBindings.findChildViewById(rootView, id);
      if (genreOneSpinner == null) {
        break missingId;
      }

      id = R.id.genreTwo;
      TextView genreTwo = ViewBindings.findChildViewById(rootView, id);
      if (genreTwo == null) {
        break missingId;
      }

      id = R.id.genreTwoSpinner;
      Spinner genreTwoSpinner = ViewBindings.findChildViewById(rootView, id);
      if (genreTwoSpinner == null) {
        break missingId;
      }

      id = R.id.link;
      TextView link = ViewBindings.findChildViewById(rootView, id);
      if (link == null) {
        break missingId;
      }

      id = R.id.linkEditText;
      EditText linkEditText = ViewBindings.findChildViewById(rootView, id);
      if (linkEditText == null) {
        break missingId;
      }

      id = R.id.matureRated;
      SwitchMaterial matureRated = ViewBindings.findChildViewById(rootView, id);
      if (matureRated == null) {
        break missingId;
      }

      id = R.id.privateButton;
      MaterialButton privateButton = ViewBindings.findChildViewById(rootView, id);
      if (privateButton == null) {
        break missingId;
      }

      id = R.id.seriesTitle;
      TextView seriesTitle = ViewBindings.findChildViewById(rootView, id);
      if (seriesTitle == null) {
        break missingId;
      }

      id = R.id.seriesTitleEditText;
      EditText seriesTitleEditText = ViewBindings.findChildViewById(rootView, id);
      if (seriesTitleEditText == null) {
        break missingId;
      }

      id = R.id.tags;
      TextView tags = ViewBindings.findChildViewById(rootView, id);
      if (tags == null) {
        break missingId;
      }

      id = R.id.tagsEditText;
      EditText tagsEditText = ViewBindings.findChildViewById(rootView, id);
      if (tagsEditText == null) {
        break missingId;
      }

      id = R.id.unlistedButton;
      MaterialButton unlistedButton = ViewBindings.findChildViewById(rootView, id);
      if (unlistedButton == null) {
        break missingId;
      }

      id = R.id.visibility;
      TextView visibility = ViewBindings.findChildViewById(rootView, id);
      if (visibility == null) {
        break missingId;
      }

      id = R.id.visibilityToggleGroup;
      MaterialButtonToggleGroup visibilityToggleGroup = ViewBindings.findChildViewById(rootView, id);
      if (visibilityToggleGroup == null) {
        break missingId;
      }

      return new FragmentCreateDetailsBinding((ConstraintLayout) rootView, back, create,
          everyoneButton, genreOne, genreOneSpinner, genreTwo, genreTwoSpinner, link, linkEditText,
          matureRated, privateButton, seriesTitle, seriesTitleEditText, tags, tagsEditText,
          unlistedButton, visibility, visibilityToggleGroup);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
